name: Build & Release Zed (trans trigger)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from commit message
        id: extract-version
        run: |
          msg="${{ github.event.head_commit.message }}"
          if [[ "$msg" =~ ^trans:\ (.+)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "No trans: prefix in commit message. Skipping build."
            exit 1
          fi

      - name: Create Git Tag
        if: steps.extract-version.outputs.version != ''
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ steps.extract-version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping tag creation."
          else
            git tag ${{ steps.extract-version.outputs.version }}
            git push origin ${{ steps.extract-version.outputs.version }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

  build-windows:
    needs: check-commit
    if: needs.check-commit.outputs.version != ''
    runs-on: windows-latest
    env:
      ZED_WORKSPACE: ${{ github.workspace }}
      RELEASE_VERSION: ${{ needs.check-commit.outputs.version }}
      ZED_RELEASE_CHANNEL: dev
      RELEASE_CHANNEL: dev
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Enable Git long paths
        run: git config --system core.longpaths true

      - name: Install Rust (MSVC target)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc
          override: true

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Enable Windows Long Paths in Registry
        run: |
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -Type DWord
        shell: powershell

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2

      - name: Install Inno Setup
        run: |
          $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
          $output = "$env:TEMP\innosetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        shell: powershell

      - name: Build Zed installer
        working-directory: ${{ env.ZED_WORKSPACE }}
        run: |
          try {
            script/bundle-windows-ci.ps1
          } catch {
            Write-Error "Build failed: $_"
            Get-ChildItem target -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.Name -like "*.log"} | ForEach-Object {
              Write-Output "=== $($_.FullName) ==="
              Get-Content $_.FullName -ErrorAction SilentlyContinue
            }
            throw
          }
        shell: powershell

      - name: Check if installer was created
        run: |
          if (Test-Path env:SETUP_PATH) {
            Write-Output "Installer path: $env:SETUP_PATH"
            if (Test-Path $env:SETUP_PATH) {
              Write-Output "Installer file exists and is $(Get-Item $env:SETUP_PATH | Select-Object -ExpandProperty Length) bytes"
            } else {
              Write-Error "Installer file not found at $env:SETUP_PATH"
              exit 1
            }
          } else {
            Write-Error "SETUP_PATH environment variable not set"
            exit 1
          }
        shell: powershell

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-windows-installer
          path: ${{ env.SETUP_PATH }}
          if-no-files-found: error

  build-macos:
    needs: check-commit
    if: needs.check-commit.outputs.version != ''
    runs-on: macos-latest
    env:
      MACOS_CERTIFICATE: ${{ secrets.MAC_CERT_P12_BASE64 }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
      APPLE_NOTARIZATION_KEY: ${{ secrets.APPLE_NOTARIZATION_KEY }}
      APPLE_NOTARIZATION_KEY_ID: ${{ secrets.APPLE_NOTARIZATION_KEY_ID }}
      APPLE_NOTARIZATION_ISSUER_ID: ${{ secrets.APPLE_NOTARIZATION_ISSUER_ID }}
      MACOS_SIGNING_KEY: ${{ secrets.MACOS_SIGNING_KEY }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew update
          brew install jq cmake
          npm install -g dmg-license minimist

      - name: Setup Rust toolchain with targets
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-darwin,x86_64-apple-darwin
          override: true

      - name: Setup Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept

      - name: Make bundle script executable
        run: chmod +x ./script/bundle-mac

      - name: Build & Bundle macOS app
        run: ./script/bundle-mac -o

      - name: Upload macOS build artifact (DMG and app)
        uses: actions/upload-artifact@v4
        with:
          name: zed-macos-build
          path: |
            target/x86_64-apple-darwin/release/dmg/Zed.dmg
            target/aarch64-apple-darwin/release/dmg/Zed.dmg
            # 也可以上传 app 包目录，如果你需要

  release:
    needs: [check-commit, build-windows, build-macos]
    if: needs.check-commit.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find dist -type f -name "*" | head -20

      - name: Prepare release files
        run: |
          mkdir -p release-files
          # Copy Windows installer
          if [ -f dist/zed-windows-installer/*.exe ]; then
            cp dist/zed-windows-installer/*.exe release-files/
          fi
          # Copy macOS DMG files
          if [ -d dist/zed-macos-build ]; then
            find dist/zed-macos-build -name "*.dmg" -exec cp {} release-files/ \;
          fi
          echo "Release files:"
          ls -la release-files/

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          tag_name: ${{ needs.check-commit.outputs.version }}
          name: Release ${{ needs.check-commit.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
