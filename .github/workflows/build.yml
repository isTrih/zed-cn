name: Build & Release Zed (trans trigger)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Extract version from commit message
        id: extract-version
        run: |
          msg="${{ github.event.head_commit.message }}"
          if [[ "$msg" =~ ^trans:\ (.+)$ ]]; then
            version="${BASH_REMATCH[1]}"
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "No trans: prefix in commit message. Skipping build."
            exit 1

      - name: Create Git Tag
        if: steps.extract-version.outputs.version != ''
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ steps.extract-version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping tag creation."
          else
            git tag ${{ steps.extract-version.outputs.version }}
            git push origin ${{ steps.extract-version.outputs.version }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

  build-windows:
    needs: check-commit
    if: needs.check-commit.outputs.version != ''
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Enable Git long paths
        run: git config --system core.longpaths true

      - name: Install Rust (MSVC target)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc
          override: true

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Install C++ build tools and SDK
        uses: microsoft/setup-cpp@v1
        with:
          vs-version: "latest"
          components: >
            Microsoft.VisualStudio.Component.VC.Tools.x86.x64,
            Microsoft.VisualStudio.Component.VC.CMake.Project,
            Microsoft.VisualStudio.Component.Windows11SDK.26100,
            Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre

      - name: Enable Windows Long Paths in Registry
        run: |
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -Type DWord
        shell: powershell

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2

      - name: Build Release
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Package Windows Build
        run: |
          mkdir dist
          copy target\x86_64-pc-windows-msvc\release\zed*.exe dist\
          powershell Compress-Archive -Path dist\* -DestinationPath zed-windows-amd64.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-windows-amd64
          path: zed-windows-amd64.zip
          if-no-files-found: error

  build-macos:
    needs: check-commit
    if: needs.check-commit.outputs.version != ''
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # 导入 Apple 证书
      - name: Import Apple Developer Certificate
        run: |
          echo "$MAC_CERT_P12_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p temp_pass build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temp_pass build.keychain
          security import certificate.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k temp_pass build.keychain
        env:
          MAC_CERT_P12_BASE64: ${{ secrets.MAC_CERT_P12_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

      - name: Install Rust (arm64 target)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-darwin
          override: true

      - name: Select Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept

      - name: Install CMake
        run: brew install cmake

      - name: Set clang args
        run: echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=$(xcrun --show-sdk-path)" >> $GITHUB_ENV

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2

      - name: Build Release
        run: cargo build --release --target aarch64-apple-darwin

      # 代码签名
      - name: Sign binary
        run: |
          codesign --force --options runtime \
                   --sign "Developer ID Application: Your Name (TEAMID)" \
                   target/aarch64-apple-darwin/release/zed
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # 公证（可选）
      - name: Notarize app
        run: |
          ditto -c -k --keepParent target/aarch64-apple-darwin/release/zed zed-macos-arm64.zip
          xcrun notarytool submit zed-macos-arm64.zip \
              --apple-id "${{ secrets.APPLE_ID }}" \
              --password "${{ secrets.APPLE_APP_PASSWORD }}" \
              --team-id "${{ secrets.APPLE_TEAM_ID }}" \
              --wait
          xcrun stapler staple target/aarch64-apple-darwin/release/zed

      - name: Package macOS Build
        run: |
          mkdir dist
          cp target/aarch64-apple-darwin/release/zed* dist/
          tar -czf zed-macos-arm64.tar.gz -C dist .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-macos-arm64
          path: zed-macos-arm64.tar.gz
          if-no-files-found: error

  release:
    needs: [check-commit, build-windows, build-macos]
    if: needs.check-commit.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*/*
          tag_name: ${{ needs.check-commit.outputs.version }}
          name: Release ${{ needs.check-commit.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
